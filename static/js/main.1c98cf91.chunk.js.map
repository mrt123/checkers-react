{"version":3,"sources":["gameApi/fieldsApi.js","gameApi/boardApi.js","state/board/boardReducer.js","state/board/boardActions.js","state/reducers.js","state/store.js","board/Pin.js","board/Field.js","board/BoardBox.js","board/Board.js","App.js","serviceWorker.js","index.js"],"names":["getFields","Array","apply","length","map","arg1","i","y","Math","floor","x","f","highlight","color","getFieldColor","pin","getPinForField","createPin","moveDirection","tryMove","fieldTarget","fields","type","pinX","pinY","moveCountX","abs","moveCountY","intermediateX","intermediateY","intermediateField","filter","killed","highlightOneField","targetField","hlValue","board","state","activePin","action","moveResult","updatedPin","combineReducers","testState","middleWares","loggerMiddleware","createLogger","collapsed","push","createStore","rootReducer","applyMiddleware","Pin","styled","div","p","visibility","dispatch","useDispatch","useSelector","useState","setVisibility","draggable","onDragStart","setTimeout","onDragEnd","FieldBox","img","unsetDropField","pinEL","eventProps","onDragEnter","e","onDragLeave","onDragOver","preventDefault","onDrop","fieldsEls","Field","key","BoardBox","App","className","Board","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c98cf91.chunk.js","sourcesContent":["export function getFields() {\n  const fields = Array.apply(null, { length: 64 }).map((arg1, i) => {\n    const y = Math.floor(i / 8);\n    const x = i - 8 * y;\n    const f = { x, y, highlight: false, color: getFieldColor(x, y) };\n    return { ...f, pin: getPinForField(f) };\n  });\n  return fields;\n}\n\nfunction getFieldColor(x, y) {\n  return (x + y) % 2 === 0 ? 'white' : 'black';\n}\n\nexport function getPinForField(f) {\n  if (f.y <= 2 && f.color === 'black') return createPin(f.x, f.y, 'orange', 1);\n  if (f.y >= 5 && f.color === 'black') return createPin(f.x, f.y, 'white', -1);\n  else return null;\n}\n\nfunction createPin(x, y, color, moveDirection) {\n  return { x, y, color, moveDirection };\n}\n","export function tryMove(pin, fieldTarget, fields) {\n  if (fieldTarget.pin !== null || fieldTarget.color === 'white') return { type: 'illegal' };\n\n  const pinX = pin.x;\n  const pinY = pin.y;\n\n  const moveCountX = Math.abs(fieldTarget.x - pinX);\n  const moveCountY = fieldTarget.y - pinY;\n\n  if (moveCountX === 1 && moveCountY === pin.moveDirection * 1) return { type: 'normal' };\n  else if (moveCountX === 2 && moveCountY === pin.moveDirection * 2) {\n    const intermediateX = pinX + (fieldTarget.x - pinX) / 2;\n    const intermediateY = pinY + (fieldTarget.y - pinY) / 2;\n\n    const intermediateField = fields.filter(f => {\n      return f.x === intermediateX && f.y === intermediateY;\n    })[0];\n\n    if (intermediateField.pin && intermediateField.pin.color !== pin.color) {\n      return { type: 'kill', killed: intermediateField.pin };\n    } else return { type: 'illegal' };\n  } else return { type: 'illegal' };\n  //TODO: other cases\n}\n","import { SET_ACTIVE_PIN, SET_DROP_FIELD, UNSET_DROP_FIELD, TRY_MOVE_PIN } from '../board/boardActions.js';\nimport { getFields } from '../../gameApi/fieldsApi.js';\nimport { tryMove } from '../../gameApi/boardApi.js';\n\nconst board = (\n  state = {\n    activePin: null,\n    fields: getFields()\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_ACTIVE_PIN: {\n      return {\n        ...state,\n        activePin: action.pin\n      };\n    }\n    case SET_DROP_FIELD: {\n      const moveResult = tryMove(state.activePin, action.f, state.fields);\n\n      if (moveResult.type === 'illegal') return state;\n      else {\n        return {\n          ...state,\n          fields: highlightOneField(state.fields, action.f, true)\n        };\n      }\n    }\n    case UNSET_DROP_FIELD: {\n      return {\n        ...state,\n        fields: highlightOneField(state.fields, action.f, false)\n      };\n    }\n    case TRY_MOVE_PIN: {\n      const targetField = action.f;\n      const pin = state.activePin;\n      const moveResult = tryMove(pin, targetField, state.fields);\n\n      if (moveResult.type === 'illegal') return state;\n      else {\n        return {\n          ...state,\n          fields: state.fields.map(f => {\n            if (moveResult.killed === f.pin) return { ...f, pin: null };\n\n            if (f.x === pin.x && f.y === pin.y) return { ...f, pin: null };\n            else if (f === targetField) {\n              const updatedPin = { ...pin, x: f.x, y: f.y };\n              return { ...f, pin: updatedPin };\n            }\n            return f;\n          })\n        };\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nfunction highlightOneField(fields, targetField, hlValue) {\n  return fields.map(f => {\n    const fieldMatch = f.x === targetField.x && f.y === targetField.y;\n    return fieldMatch ? { ...f, highlight: hlValue } : f;\n  });\n}\n\nexport default board;\n","export const SET_ACTIVE_PIN = 'SET_ACTIVE_PIN';\nexport const SET_DROP_FIELD = 'SET_DROP_FIELD';\nexport const UNSET_DROP_FIELD = 'UNSET_DROP_FIELD';\nexport const TRY_MOVE_PIN = 'TRY_MOVE_PIN';\n","import { combineReducers } from 'redux';\nimport board from './board/boardReducer.js';\n\nconst testState = (state = 'testState-OK') => {\n  return state;\n};\n\nexport default combineReducers({ board, testState });\n","import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from './reducers';\n\nconst middleWares = [];\n\n//const logsOn = localStorage.getItem('state-log-on') !== null;\nconst logsOn = true;\nif (logsOn) {\n  const loggerMiddleware = createLogger({\n    collapsed: true\n  });\n  middleWares.push(loggerMiddleware);\n}\n\nexport default createStore(rootReducer, applyMiddleware(...middleWares));\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nconst Pin = styled.div`\n  z-index: 202;\n  border-radius: 25px;\n  width: 50px;\n  height: 50px;\n  background-color: ${p => p.color};\n  visibility: ${p => p.visibility};\n  border: 5px solid black;\n`;\n\nexport default ({ pin }) => {\n  const dispatch = useDispatch();\n  const activePin = useSelector(state => state.board.activePin);\n  const setActivePin = () => dispatch({ type: 'SET_ACTIVE_PIN', pin: pin });\n  const [visibility, setVisibility] = useState('visible');\n\n  const onDragStart = () => {\n    if (activePin !== pin) {\n      setActivePin(pin);\n    }\n    setTimeout(() => {\n      setVisibility('hidden'); // hides original element but leaves dragged\n    });\n  };\n\n  const onDragEnd = () => {\n    setVisibility('visible');\n  };\n\n  return (\n    <Pin\n      color={pin.color}\n      visibility={visibility}\n      draggable=\"true\"\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n    ></Pin>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport Pin from './Pin.js';\nimport { useDispatch } from 'react-redux';\n\nconst FieldBox = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 60px;\n  height: 60px;\n  background-color: ${p => p.color};\n  color: red;\n  font-size: 9px;\n  background-image: url(\"${p => p.img}\");\n  ${p => (p.highlight ? 'border: 4px dotted yellow' : 'border: none')};\n`;\n\nexport default ({ f }) => {\n  const dispatch = useDispatch();\n  const setDropField = x => dispatch({ type: 'SET_DROP_FIELD', f: x });\n  const unsetDropField = x => dispatch({ type: 'UNSET_DROP_FIELD', f: x });\n  const tryMove = () => dispatch({ type: 'TRY_MOVE_PIN', f });\n\n  const img = f.color === 'white' ? 'white.jpg' : 'black.jpg';\n  const pinEL = f.pin === null ? null : <Pin pin={f.pin} />;\n\n  const onDrop = () => {\n    tryMove(f);\n    unsetDropField(f);\n  };\n\n  const eventProps = {\n    onDragEnter: e => setDropField(f),\n    onDragLeave: e => unsetDropField(f),\n    onDragOver: e => e.preventDefault(), // required for onDrop to work!\n    onDrop\n  };\n\n  return (\n    <FieldBox img={img} color={f.color} highlight={f.highlight} {...eventProps}>\n      {pinEL}\n    </FieldBox>\n  );\n};\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 480px;\n  height: 480px;\n  background: grey;\n  font-size: 10px;\n`;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Field from './Field.js';\nimport BoardBox from './BoardBox';\n\nexport default ({ x }) => {\n  const fields = useSelector(state => state.board.fields);\n  const fieldsEls = fields.map((f, i) => <Field key={i} f={f} />);\n\n  return <BoardBox>{fieldsEls}</BoardBox>;\n};\n","import React from 'react';\nimport './App.css';\nimport Board from './board/Board.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Checkers-React</p>\n        <Board />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './state/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}